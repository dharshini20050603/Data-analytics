# -*- coding: utf-8 -*-
"""load digit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s7rWNq9zRwj43Afvwl5JMKbJdb-eqxi4
"""

from sklearn.datasets import load_digits
import pandas as pd

dataset = load_digits()
dataset.keys()

dataset.data.shape

dataset.data[0]

dataset.data[0].reshape(8,8)

# Commented out IPython magic to ensure Python compatibility.
from matplotlib import pyplot as plt
# %matplotlib inline
plt.gray()
plt.matshow(dataset.data[0].reshape(8,8))

plt.matshow(dataset.data[9].reshape(8,8))

dataset.target[:5]

df = pd.DataFrame(dataset.data, columns=dataset.feature_names)
df.head()

dataset.target

df.describe()

x = df
y = dataset.target

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)
x_scaled

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.2, random_state=30)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train, y_train)
model.score(x_test, y_test)

x

from sklearn.decomposition import PCA
pca = PCA(0.4)
x_pca = pca.fit_transform(x)
x_pca.shape

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(max_iter=1000)
model.fit(x_train, y_train)
model.score(x_test, y_test)

pca = PCA(n_components=2)
x_pca = pca.fit_transform(x)
x_pca.shape

pca.n_components_

x_pca

pca.explained_variance_ratio_

x_train_pca, x_test_pca, y_train, y_test = train_test_split(x_pca, y, test_size=0.2, random_state=30)

model = LogisticRegression(max_iter=1000)
model.fit(x_train_pca, y_train)
model.score(x_test_pca, y_test)

from sklearn.cluster import KMeans

km = KMeans(n_clusters=3, random_state=42, n_init=10)
y_predicted = km.fit_predict(x)

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]

df_pca = pd.DataFrame(x_pca, columns=['principal_component_1', 'principal_component_2'])
df_pca['cluster'] = y_predicted

df1_pca = df_pca[df_pca.cluster == 0]
df2_pca = df_pca[df_pca.cluster == 1]
df3_pca = df_pca[df_pca.cluster == 2]

plt.scatter(df1_pca['principal_component_1'], df1_pca['principal_component_2'], color='green', label='Cluster 0')
plt.scatter(df2_pca['principal_component_1'], df2_pca['principal_component_2'], color='red', label='Cluster 1')
plt.scatter(df3_pca['principal_component_1'], df3_pca['principal_component_2'], color='black', label='Cluster 2')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend()

# -*- coding: utf-8 -*-
"""DBSCANipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arpEnjPLZxyHjnFHjJRyqv7UqfROSQi-
"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
from sklearn import datasets

points=np.array([
    [3,7],
    [4,6],
    [5,5],
    [6,4],
    [7,3],
    [6,2],
    [7,2],
    [8,4],
    [3,3],
    [2,6],
    [3,5],
    [2,4],

    ])

dbscan=DBSCAN(eps=1.9,min_samples=4)
labels=dbscan.fit_predict(points)

plt.figure(figsize=(8, 6))
unique_labels = set(labels)

for label in unique_labels:
    cluster_points = points[labels == label]
    if cluster_points.size == 0:
        continue
    if label == -1:
        plt.scatter(cluster_points[:, 0], cluster_points[:, 1], c='k' , marker='x' , label='Noise')
    else:
        plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f'Cluster {label}')

plt.legend()
plt.title('DBSCAN Clustering')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.grid(True)
plt.show()

print("Cluster labels for each point:")
for i, label in enumerate(labels):
  print(f"p{i}: Cluster{' ' + str(label) if label != -1 else ' Noise'}")

n_clusters=len(set(labels))-(1 if -1 in labels else 0)
print()
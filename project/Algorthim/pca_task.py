# -*- coding: utf-8 -*-
"""pca task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1peWIZ-ONd6tP56TMfiutNLI4aqZAnktF
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.decomposition import PCA
from scipy.stats import zscore

from google.colab import files
uploaded=files.upload()

print("Original shape:", df.shape)

df = pd.read_csv('heart.csv')

z_scores = np.abs(zscore(df.select_dtypes(include=[np.number])))
df = df[(z_scores < 3).all(axis=1)]
print("After removing outliers:", df.shape)

df_encoded = df.copy()

# Label Encoding for binary categorical columns
label_enc = LabelEncoder()
for col in df_encoded.select_dtypes(include=['object']).columns:
    if df_encoded[col].nunique() == 2:
        df_encoded[col] = label_enc.fit_transform(df_encoded[col])

# One-Hot Encoding for multiclass categorical columns
df_encoded = pd.get_dummies(df_encoded)

X = df_encoded.drop('HeartDisease', axis=1)
y = df_encoded['HeartDisease']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

lr = LogisticRegression()
lr.fit(X_train, y_train)
lr_preds = lr.predict(X_test)
lr_acc = accuracy_score(y_test, lr_preds)

# Random Forest
rf = RandomForestClassifier()
rf.fit(X_train, y_train)
rf_preds = rf.predict(X_test)
rf_acc = accuracy_score(y_test, rf_preds)

print("\nModel Accuracy without PCA:")
print(f"Logistic Regression Accuracy: {lr_acc:.4f}")
print(f"Random Forest Accuracy: {rf_acc:.4f}")

pca = PCA(n_components=0.95)  # Retain 95% variance
X_pca = pca.fit_transform(X_scaled)
print("\nShape after PCA:", X_pca.shape)

# New Train-Test Split with PCA
X_train_pca, X_test_pca, y_train_pca, y_test_pca = train_test_split(X_pca, y, test_size=0.2, random_state=42)

# Train models on PCA data

# Logistic Regression with PCA
lr_pca = LogisticRegression()
lr_pca.fit(X_train_pca, y_train_pca)
lr_pca_preds = lr_pca.predict(X_test_pca)
lr_pca_acc = accuracy_score(y_test_pca, lr_pca_preds)

# Random Forest with PCA
rf_pca = RandomForestClassifier()
rf_pca.fit(X_train_pca, y_train_pca)
rf_pca_preds = rf_pca.predict(X_test_pca)
rf_pca_acc = accuracy_score(y_test_pca, rf_pca_preds)

print("\nModel Accuracy with PCA:")
print(f"Logistic Regression with PCA: {lr_pca_acc:.4f}")
print(f"Random Forest with PCA: {rf_pca_acc:.4f}")


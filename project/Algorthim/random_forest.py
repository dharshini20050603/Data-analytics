# -*- coding: utf-8 -*-
"""Random forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-Ct_Hd47wFPRPmu92GV7HO9i-_pgako
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from google.colab import files

from google.colab import files
uploaded=files.upload()

df=pd.read_csv('purchase.csv')
df.head()

le_gender = LabelEncoder()
le_education = LabelEncoder()
le_marital = LabelEncoder()
le_purchased = LabelEncoder()

df['Gender_n'] = le_gender.fit_transform(df['Gender'])               # Male=1, Female=0
df['Education_n'] = le_education.fit_transform(df['Education'])      # Bachelor=0, Master=1, PhD=2
df['Marital_Status_n'] = le_marital.fit_transform(df['Marital Status']) # Single=1, Married=0
df['Purchased_n'] = le_purchased.fit_transform(df['Purchased'])

df=df.drop(['Age','Gender','Income','Education','Marital Status','Purchased'],axis=1)

df

independant_var=df.drop(['Purchased_n','ID',],axis='columns')
dependant_var=df['Purchased_n']

x_train,x_test,y_train,y_test=train_test_split(independant_var,dependant_var,test_size=0.3,random_state=42)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

from sklearn.metrics import accuracy_score

y_pred = model.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy *100:.2f}%")

new_data=[[1,0,1]] # Example: Female, Master, Single

prediction=model.predict(new_data)

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Access the first decision tree from your trained Random Forest model
first_tree = model.estimators_[0]

# Visualize the first tree
plt.figure(figsize=(20, 10))
plot_tree(
    first_tree,
    feature_names=independant_var.columns,  # Use your encoded feature column names
    class_names=['No', 'Yes'],             # Assuming 0 = No, 1 = Yes for 'Purchased'
    filled=True,
    rounded=True,
    max_depth=3                            # Optional: limit tree depth for clarity
)
plt.title("Visualization of Tree 1 from Random Forest")
plt.show()
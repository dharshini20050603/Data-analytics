# -*- coding: utf-8 -*-
"""IPL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tOKuZyjBOcJ8Un291aDdlO91dYZAx6jo
"""

import pandas as pd
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("deliveries.csv")
df.head()

top_batsmen = df.groupby("batter")["batsman_runs"].sum().sort_values(ascending=False).head(10)
print("Top 10 Run Scorers:")
print(top_batsmen)

# Plot
top_batsmen.plot(kind='bar', title="Top 10 Run Scorers", figsize=(10,5))
plt.xlabel("Batsman")
plt.ylabel("Runs Scored")
plt.grid(True)
plt.show()

wickets = df[df["is_wicket"] == 1]
top_bowlers = wickets.groupby("bowler").size().sort_values(ascending=False).head(10)
print("Top 10 Wicket Takers:")
print(top_bowlers)

# Plot
top_bowlers.plot(kind='bar', title="Top 10 Wicket Takers", figsize=(10,5))
plt.xlabel("Bowler")
plt.ylabel("Wickets Taken")
plt.grid(True)
plt.show()

extra_runs = df.groupby("bowling_team")["extra_runs"].sum().sort_values(ascending=False)
print("Extra Runs by Teams:")
print(extra_runs)

# Plot
extra_runs.plot(kind='bar', title="Extra Runs by Bowling Teams", figsize=(10,5))
plt.xlabel("Bowling Team")
plt.ylabel("Extra Runs")
plt.grid(True)
plt.show()

# Top 10 Fielders with Most Dismissals
fielder_dismissals = df['fielder'].value_counts().dropna().head(10)

print("üß§ Top 10 Fielders (Most Dismissals):")
print(fielder_dismissals)

# Plot
fielder_dismissals.plot(kind='bar', figsize=(10,6), color='purple')
plt.title("Top 10 Fielders (Most Dismissals)")
plt.xlabel("Fielder")
plt.ylabel("Dismissals")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Filter only deliveries where 6 runs were scored
sixes = df[df["batsman_runs"] == 6]

# Count sixes per batsman
top_six_hitters = sixes["batter"].value_counts().head(10)

print("üí• Top 10 Six Hitters:")
print(top_six_hitters)

# Plot
top_six_hitters.plot(kind='bar', figsize=(10,6), color='green')
plt.title("Top 10 Six Hitters in IPL")
plt.xlabel("Batsman")
plt.ylabel("Number of Sixes")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

wickets_by_over = df[df["is_wicket"] == 1].groupby("over")["is_wicket"].sum()

plt.figure(figsize=(10,6))
wickets_by_over.plot(kind='line', marker='o', linestyle='-', color='brown')
plt.title("Wickets by Over")
plt.xlabel("Over")
plt.ylabel("Wickets")
plt.grid(True)
plt.tight_layout()
plt.show()

from sklearn.linear_model import LinearRegression
import numpy as np

X = wickets_by_over.index.values.reshape(-1,1)  # overs
y = wickets_by_over.values  # wickets

model = LinearRegression()
model.fit(X, y)

y_pred = model.predict(X)  # fitted line

plt.scatter(X, y, color='blue', label="Actual Wickets")
plt.plot(X, y_pred, color='red', label="Regression Line")
plt.xlabel("Over")
plt.ylabel("Wickets")
plt.title("Linear Regression on Wickets by Over")
plt.legend()
plt.show()

df["is_wicket"] = df["is_wicket"].fillna(0).astype(int)
batting = df.groupby("batter")["batsman_runs"].sum()
bowling = df.groupby("bowler")["is_wicket"].sum()
all_rounders = pd.merge(
    batting.rename("Runs"),
    bowling.rename("Wickets"),
    left_index=True,
    right_index=True,
    how="outer"
).fillna(0)
all_rounders["AllRounder_Score"] = all_rounders["Runs"] + all_rounders["Wickets"] * 20
top_10_allrounders = all_rounders.sort_values("AllRounder_Score", ascending=False).head(10)
print("üèè Top 10 All-Rounders (Runs + Wickets Impact):")
print(top_10_allrounders)
plt.figure(figsize=(12,6))
plt.bar(top_10_allrounders.index, top_10_allrounders["AllRounder_Score"], color="purple")
plt.title("Top 10 All-Rounders", fontsize=16)
plt.xlabel("Player")
plt.ylabel("All-Rounder Score (Runs + Weighted Wickets)")
plt.xticks(rotation=45, ha="right")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()